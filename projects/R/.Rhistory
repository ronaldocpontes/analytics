f =a
f = range(1,8)
f
f = [1,8]
f = [1-8]
del f
delete f
f = nil
f - nan
f = nan
f = NaN
f
install.packages("RCurl")
install.packages("rjson")
dir
dir()
source("./R/RGoogleAnalytics/R/RGoogleAnalytics.R")
source("./R/RGoogleAnalytics/R/QueryBuilder.R")
source("./R/RGoogleAnalytics/R/Configuration.R")
require("RGoogleAnalytics")
package install
install.packages(BenfordTests-package)
install.packages('BenfordTests-package' )
install.packages('BenfordTests' )
set.seed(96646)
X<-rbenf(n=20)
library('BenfordTests' )
X<-rbenf(n=20)
X
dnorm
dnorm
rnorm(100000,mean=10, sd=2)
rnorm(12,mean=10, sd=2)
rnorm(12,mean=14.96, sd=1.86)
rnorm(12,mean=10.96, sd=1.86)
### R code from vignette source 'ch-association.rnw'
source('~/projects/java/analytics/projects/R/ch-association.R')
### R code from vignette source 'ch-introduction.rnw'
###################################################
### code chunk number 1: ch-introduction.rnw:6-9
###################################################
# free memory
rm(list = ls())
gc()
###################################################
### code chunk number 2: ch-introduction.rnw:179-180
###################################################
str(iris)
###################################################
### code chunk number 3: ch-introduction.rnw:200-202
###################################################
data("bodyfat", package = "mboost")
install.packages("mboost")
data("bodyfat", package = "mboost")
str(bodyfat)
### R code from vignette source 'ch-import-export.rnw'
###################################################
### code chunk number 1: ch-import-export.rnw:6-9
###################################################
# free memory
rm(list = ls())
gc()
###################################################
### code chunk number 2: ch-import-export.rnw:19-24
###################################################
a <- 1:10
a
save(a, file="./data/dumData.Rdata")
save(a, file="./data/dumDataa.Rdata")
save(a, file=path.expand("./data/dumData.Rdata"))
path.expand("./data/dumData.Rdata")
path.expand("~./data/dumData.Rdata")
save(a, file=path.expand("data/dumDataAAA.Rdata"))
install.packages("mboost")
install.packages("mboost")
รง
install.packages("Rcmdr")
quarts()
quartz()
library(Rcmdr)
rm(a)
load("./data/dumData.Rdata")
a <- 1:10
save(a, file=path.expand("dumDataAAA.Rdata"))
getwd()
setwd("/Users/ronaldo.pontes/projects/java/analytics/projects/R")
getwd()
a <- 1:10
save(a, file="./data/dumData.Rdata")
rm(a)
load("./data/dumData.Rdata")
print(a)
###################################################
### code chunk number 3: ch-import-export.rnw:32-40
###################################################
var1 <- 1:5
var2 <- (1:5) / 10
var3 <- c("R", "and", "Data Mining", "Examples", "Case Studies")
df1 <- data.frame(var1, var2, var3)
names(df1) <- c("VariableInt", "VariableReal", "VariableChar")
write.csv(df1, "./data/dummmyData.csv", row.names = FALSE)
df2 <- read.csv("./data/dummmyData.csv")
print(df2)
###################################################
### code chunk number 4: ch-import-export.rnw:71-80
###################################################
library(foreign) # for importing SAS data
# the path of SAS on your computer
sashome <- "C:/Program Files/SAS/SASFoundation/9.2"
filepath <- "./data"
# filename should be no more than 8 characters, without extension
fileName <- "dumData"
# read data from a SAS dataset
a <- read.ssd(file.path(filepath), fileName, sascmd=file.path(sashome, "sas.exe"))
print(a)
###################################################
### code chunk number 5: ch-import-export.rnw:85-90
###################################################
# read variable names from a .CSV file
variableFileName <- "dumVariables.csv"
myNames <- read.csv(paste(filepath, variableFileName, sep="/"))
names(a) <- names(myNames)
print(a)
###################################################
### code chunk number 6: ch-import-export.rnw:107-114 (eval = FALSE)
###################################################
View(df1)
## library(RODBC)
## connection <- odbcConnect(dsn="servername",uid="userid",pwd="******")
## query <- "SELECT * FROM lib.table WHERE ..."
## # or read query from file
## # query <- readChar("data/myQuery.sql", nchars=99999)
## myData <- sqlQuery(connection, query, errors=TRUE)
## odbcClose(connection)
###################################################
### code chunk number 7: ch-import-export.rnw:122-128 (eval = FALSE)
###################################################
## library(RODBC)
## filename <- "data/dummmyData.xls"
## xlsFile <- odbcConnectExcel(filename, readOnly = FALSE)
## sqlSave(xlsFile, a, rownames = FALSE)
## b <- sqlFetch(xlsFile, "a")
## odbcClose(xlsFile)
### R code from vignette source 'ch-exploration.rnw'
###################################################
### code chunk number 1: ch-exploration.rnw:6-9
###################################################
# free memory
rm(list = ls())
gc()
###################################################
### code chunk number 2: ch-exploration.rnw:20-24
###################################################
dim(iris)
names(iris)
str(iris)
attributes(iris)
###################################################
### code chunk number 3: ch-exploration.rnw:28-31
###################################################
iris[1:5,]
head(iris)
tail(iris)
###################################################
### code chunk number 4: ch-exploration.rnw:36-38
###################################################
iris[1:10, "Sepal.Length"]
iris$Sepal.Length[1:10]
###################################################
### code chunk number 5: ch-exploration.rnw:48-49
###################################################
summary(iris)
###################################################
### code chunk number 6: ch-exploration.rnw:53-55
variableFileName <- "store24.csv"
myNames <- read.csv(paste(filepath, variableFileName, sep="/"))
paste(filepath, variableFileName, sep="/")
myNames <- read.csv("store24.csv")
names(a) <- names(myNames)
a
myNames
summary(storeData)
storeData <- read.csv("store24.csv")
summary(storeData)
storeData <- read.csv("store24.csv")
hist(storeData)
hist(storeData$Manager.Tenure)
var(storeData$Manager.Tenure)
hist(storeData$Manager.Tenure)
iris[1:10, "Sepal.Length"]
iris$Sepal.Length[1:10]
storeData$Manager.Tenure
hist(storeData$Manager.Tenure)
storeData <- read.csv("store24.csv")
hist(storeData$Manager.Tenure)
dim(storeData)
names(storeData)
str(storeData)
attributes(storeData)
head(storeData)
View(myNames)
plot(density(storeData$Manager.Tenure))
table(iris$Species)
pie(table(storeData$No..of.Competitors))
pie(table(storeData$X24.Hours))
table(storeData$X24.Hours)
###################################################
### code chunk number 11: ch-exploration.rnw:105-109
###################################################
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
cor(iris$Sepal.Length, iris$Petal.Length)
cor(iris[,1:4])
cor(storeData)
cor(storeData)
###################################################
### code chunk number 12: ch-exploration.rnw:114-115
###################################################
aggregate(Sepal.Length ~ Species, summary, data=iris)
aggregate(Sales ~ X24.Hours, summary, data=storeData)
boxplot(Sales~Manager.Tenure, data=storeData)
boxplot(Sepal.Length~Species, data=iris)
boxplot(Sales~Visibility, data=storeData)
with(iris, plot(Sepal.Length, Sepal.Width, col=Species, pch=as.numeric(Species)))
with(storeData, plot(Sales, Profit.Margin, col=Visibility, pch=as.numeric(Visibility)))
pairs(iris)
a=storeData
pairs(a)
pairs(storeData)
library(scatterplot3d)
install.packages("scatterplot3d")
iris[,1:4])
iris[,1:4]
distMatrix <- as.matrix(dist(storeData[,1:4]))
heatmap(distMatrix)
rm(list = ls())
gc()
year <- rep(2008:2010, each=4)
quarter <- rep(1:4, 3)
cpi <- c(162.2, 164.6, 166.5, 166.0,
166.2, 167.0, 168.6, 169.5,
171.0, 172.1, 173.3, 174.0)
plot(cpi, xaxt="n", ylab="CPI", xlab="")
axis(1, labels=paste(year,quarter,sep="Q"), at=1:12, las=3)
###################################################
### code chunk number 3: ch-regression.rnw:50-52
###################################################
cor(year,cpi)
cor(quarter,cpi)
###################################################
### code chunk number 4: ch-regression.rnw:56-58
###################################################
fit <- lm(cpi ~ year + quarter)
fit
storeData <- read.csv("store24.csv")
fit <- lm(storeData$Sales ~ storeData$Manager.Tenure + storeData$X24.Hours)
fit
fit <- lm(cpi ~ year + quarter)
fit
###################################################
### code chunk number 5: ch-regression.rnw:65-67
###################################################
(cpi2011 <- fit$coefficients[[1]] + fit$coefficients[[2]]*2011 +
fit$coefficients[[3]]*(1:4))
###################################################
### code chunk number 6: ch-regression.rnw:72-74
###################################################
attributes(fit)
fit$coefficients
residuals(fit)
summary(fit)
plot(residuals(fit))
plot(fit)
layout(matrix(c(1,2,3,4),2,2)) # 4 graphs per page
plot(fit)
layout(matrix(1)) # change back to one graph per page
library(scatterplot3d)
s3d <- scatterplot3d(year, quarter, cpi, highlight.3d=T, type="h", lab=c(2,3))
s3d$plane3d(fit)
s3d <- scatterplot3d(storeData$Manager.Tenure, storeData$X24.Hours, storeData$Sales, highlight.3d=T, type="h", lab=c(2,3))
data2011 <- data.frame(year=2011, quarter=1:4)
cpi2011 <- predict(fit, newdata=data2011)
style <- c(rep(1,12), rep(2,4))
plot(c(cpi, cpi2011), xaxt="n", ylab="CPI", xlab="", pch=style, col=style)
axis(1, at=1:16, las=3,
labels=c(paste(year,quarter,sep="Q"), "2011Q1", "2011Q2", "2011Q3", "2011Q4"))
###################################################
### code chunk number 12: ch-regression.rnw:164-169
###################################################
data("bodyfat", package="mboost")
myFormula <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat.glm <- glm(myFormula, family = gaussian("log"), data = bodyfat)
summary(bodyfat.glm)
pred <- predict(bodyfat.glm, type="response")
###################################################
### code chunk number 13: ch-regression.rnw:176-178
###################################################
plot(bodyfat$DEXfat, pred, xlab="Observed Values", ylab="Predicted Values")
abline(a=0, b=1)
### R code from vignette source 'ch-clustering.rnw'
###################################################
### code chunk number 1: ch-clustering.rnw:6-9
###################################################
# free memory
rm(list = ls())
gc()
###################################################
### code chunk number 2: ch-clustering.rnw:18-19
###################################################
set.seed(8953)
###################################################
### code chunk number 3: ch-clustering.rnw:22-25
###################################################
set.seed(8953)
set.seed(8953)
set.seed(8953)
set.seed(8953)
iris2 <- iris
iris2$Species <- NULL
(kmeans.result <- kmeans(iris2, 3))
(kmeans.result <- kmeans(iris2, 3))
(kmeans.result <- kmeans(iris2, 3))
###################################################
### code chunk number 4: ch-clustering.rnw:30-31
###################################################
table(iris$Species, kmeans.result$cluster)
table(iris$Species, kmeans.result$cluster)
###################################################
### code chunk number 5: ch-clustering.rnw:38-42
###################################################
plot(iris2[c("Sepal.Length", "Sepal.Width")], col = kmeans.result$cluster)
# plot cluster centers
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col = 1:3,
pch = 8, cex=2)
###################################################
### code chunk number 6: ch-clustering.rnw:62-68
###################################################
library(fpc)
pamk.result <- pamk(iris2)
install.package("fpc")
install.packages("fpc")
library(fpc)
pamk.result <- pamk(iris2)
# number of clusters
pamk.result$nc
# check clustering against actual species
table(pamk.result$pamobject$clustering, iris$Species)
table(pamk.result$pamobject$clustering, iris$Species)
###################################################
### code chunk number 7: ch-clustering.rnw:80-83
###################################################
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
layout(matrix(c(1,2),1,2)) # 2 graphs per page
plot(pamk.result$pamobject)
layout(matrix(1)) # change back to one graph per page
pam.result <- pam(iris2, 3)
table(pam.result$clustering, iris$Species)
###################################################
# free memory
rm(list = ls())
gc()
###################################################
### code chunk number 2: ch-outlier.rnw:24-30
###################################################
set.seed(3147)
x <- rnorm(100)
summary(x)
# outliers
boxplot.stats(x)$out
boxplot(x)
install.packages("DMwR")
library(DMwR)
# remove "Species", which is a categorical column
iris2 <- iris[,1:4]
outlier.scores <- lofactor(iris2, k=5)
plot(density(outlier.scores))
###################################################
### code chunk number 7: ch-outlier.rnw:105-110
###################################################
# pick top 5 as outliers
outliers <- order(outlier.scores, decreasing=T)[1:5]
# who are outliers
print(outliers)
print(iris2[outliers,])
n <- nrow(iris2)
labels <- 1:n
labels[-outliers] <- "."
biplot(prcomp(iris2), cex=.8, xlabs=labels)
rm(list = ls())
gc()
storeData <- read.csv("store24.csv")
names(storeData)
install.packages("foreign")
install.packages("foreign")
install.packages("MASS")
names(storeData)
summary(ols <- lm(Profit ~ SQRT.Manager + SQRT.Crew + Competitors + Footfall + Residential + Population + X24h + Visibility, data = cdata))
summary(ols <- lm(Profit ~ SQRT.Manager + SQRT.Crew + Competitors + Footfall + Residential + Population + X24h + Visibility, data = storeData))
summary(storeData)
str(storeData)
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1)
rm(list = ls())
gc()
storeData <- read.csv("store24.csv")
names(storeData)
#begin by running an OLS regression
summary(ols <- lm(Profit ~ SQRT.Manager + SQRT.Crew + Competitors + Footfall + Residential + Population + X24h + Visibility, data = storeData))
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1)
require(foreign)
require(MASS)
dim(storeData)
nrow(storeData)
par(opar)
COOKS.DISTANCE <- cooks.distance(ols)
STD.RESIDUAL <- stdres(ols)
a <- cbind(storeData, COOKS.DISTANCE, STD.RESIDUAL)
cuttting_point <- 4/nrow(storeData)
a[d1 >cuttting_point, ]
a[COOKS.DISTANCE >cuttting_point, ]
# Outliars Detection
# ===================================
## Outlier: In linear regression, an outlier is an observation with large residual. In other words, it is an observation whose dependent-variable value is unusual given its value on the predictor variables. An outlier may indicate a sample peculiarity or may indicate a data entry error or other problem.
## Residual: The difference between the predicted value (based on the regression equation) and the actual, observed value.
## Cook's distance (or Cook's D): A measure that combines the information of leverage and residual of the observation.
## Leverage: An observation with an extreme value on a predictor variable is a point with high leverage. Leverage is a measure of how far an independent variable deviates from its mean. High leverage points can have a great amount of effect on the estimate of regression coefficients.
## Influence: An observation is said to be influential if removing the observation substantially changes the estimate of the regression coefficients.  Influence can be thought of as the product of leverage and outlierness.
COOKS.DISTANCE <- cooks.distance(ols)
# ===================================
rabs <- abs(STD.RESIDUAL)
a <- cbind(storeData, COOKS.DISTANCE, STD.RESIDUAL, rabs)
asorted <- a[order(-rabs), ]
asorted[1:10, ]
rabs <- abs(STD.RESIDUAL)
a <- cbind(storeData, COOKS.DISTANCE, STD.RESIDUAL, rabs)
asorted <- a[order(-rabs), ]
asorted[COOKS.DISTANCE >cuttting_point, ]
summary(rr.huber <- rlm(Profit ~ SQRT.Manager + SQRT.Crew + Competitors + Footfall + Residential + Population + X24h + Visibility, data = storeData))
hweights <- data.frame(state = cdata$state, resid = rr.huber$resid, weight = rr.huber$w)
hweights <- data.frame(state = storeData, resid = rr.huber$resid, weight = rr.huber$w)
hweights2 <- hweights[order(rr.huber$w), ]
hweights2[1:15, ]
# Huber weighting - Robust regression
summary(rr.bisquare <- rlm(Profit ~ SQRT.Manager + SQRT.Crew + Competitors + Footfall + Residential + Population + X24h + Visibility, data = storeData, psi = psi.bisquare))
# Show calculated weights
biweights <- data.frame(state = storeData, resid = rr.bisquare$resid, weight = rr.bisquare$w)
biweights2 <- biweights[order(rr.bisquare$w), ]
biweights2[1:15, ]
install.packages("Rcmdr")
quit();
